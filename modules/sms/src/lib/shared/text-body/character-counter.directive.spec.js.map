{"version":3,"file":"character-counter.directive.spec.js","sourceRoot":"","sources":["character-counter.directive.spec.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,uCAAuC;AACvC,iDAAyE;AAEzE,sCAA8F;AAC9F,wCAA6C;AAE7C,0CAAsE;AACtE,4CAAsD;AAEtD,uDAAoD;AACpD,6EAA0E;AAE1E,QAAQ,CAAC,6BAA6B,EAAE;IACtC,IAAI,SAA+B,CAAC;IACpC,IAAI,SAAuB,CAAC;IAC5B,IAAI,SAAoC,CAAC;IACzC,IAAI,OAA+C,CAAC;IAGpD,UAAU,CAAC;QACT,iBAAO,CAAC,sBAAsB,CAAC;YAC7B,YAAY,EAAE;gBACZ,oBAAoB;aACrB;YACD,OAAO,EAAE;gBACP,mBAAW;gBACX,iCAAc;aACf;YACD,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,uBAAc,EAAE,QAAQ,EAAE,4BAAkB,EAAE;gBACzD,EAAE,OAAO,EAAE,4BAAmB,EAAE,QAAQ,EAAE,4BAAkB,EAAE;gBAC9D,EAAE,OAAO,EAAE,iBAAU,EAAE,QAAQ,EAAE,CAAC,CAAC,uBAAuB,CAAC,EAAC;aAC7D;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC;QACT,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;QACxD,SAAS,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACtC,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC;QACT,uEAAuE;QACvE,yFAAyF;IAC3F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,eAAe,EAAE;QAClB,MAAM,CAAC,SAAS,CAAC,CAAC,UAAU,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE;QAC5C,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,UAAU,EAAE,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE;QAC7B,IAAI,OAAO,GAAG,EAAE,CAAA;QAChB,UAAU,CAAC;YACT,OAAO,GAAG;gBACR,EAAE,IAAI,EAAE,UAAU;oBAChB,UAAU,EAAE,EAAE;iBACf;gBACD,EAAE,IAAI,EAAE,YAAY;oBAClB,UAAU,EAAE,EAAE;iBACf;gBACD,EAAE,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE,CAAC;iBACd;aACF,CAAA;QACH,CAAC,CAAC,CAAA;QACF,EAAE,CAAC,4CAA4C,EAAE;YAC/C,SAAS,CAAC,SAAS,CAAC,OAAO,GAAG,OAAO,CAAC;YACtC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAA;YAChD,IAAI,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAEjC,CAAC,CAAC,CAAA;QACF,EAAE,CAAC,mDAAmD,EAAE;YACtD,SAAS,CAAC,SAAS,CAAC,OAAO,GAAG,OAAO,CAAC;YACtC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAA;YAClD,IAAI,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACjC,CAAC,CAAC,CAAA;QACF,EAAE,CAAC,+DAA+D,EAAE;YAClE,SAAS,CAAC,SAAS,CAAC,OAAO,GAAG,OAAO,CAAC;YACtC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;YAC9C,IAAI,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACjC,CAAC,CAAC,CAAA;QACF,EAAE,CAAC,yCAAyC,EAAE;YAC5C,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;YAC7C,IAAI,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACjC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AAEJ,CAAC,CAAC,CAAC;AAQH,IAAa,oBAAoB;IAS/B;QAFA,YAAO,GAAW,oBAAoB,CAAC;IAEvB,CAAC;IAEjB,8CAAe,GAAf;QACE,qCAAqC;IACvC,CAAC;IAEH,2BAAC;AAAD,CAAC,AAfD,IAeC;AAVuC;IAArC,gBAAS,CAAC,uDAAyB,CAAC;8BAAY,uDAAyB;uDAAC;AALhE,oBAAoB;IANhC,gBAAS,CAAC;QACT,QAAQ,EACR,wEAEC;KACF,CAAC;;GACW,oBAAoB,CAehC;AAfY,oDAAoB","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { AfterViewInit, Component, ElementRef, ViewChild, DebugElement } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { CoreApiService, TextMsgItApiService } from '../../../shared';\nimport { CoreApiServiceMock } from '../../../testing';\n\nimport { TextBodyModule } from './text-body.module';\nimport { CharacterCounterDirective } from './character-counter.directive';\n\ndescribe('Directive: CharacterCounter', () => {\n  let component: MockWrapperComponent;\n  let debugElem: DebugElement;\n  let directive: CharacterCounterDirective;\n  let fixture: ComponentFixture<MockWrapperComponent>;\n\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [\n        MockWrapperComponent\n      ],\n      imports: [\n        FormsModule,\n        TextBodyModule\n      ],\n      providers: [\n        { provide: CoreApiService, useValue: CoreApiServiceMock },\n        { provide: TextMsgItApiService, useValue: CoreApiServiceMock },\n        { provide: ElementRef, useValue: $('<textarea></textarea>')}\n      ]\n    });\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(MockWrapperComponent);\n    component = fixture.componentInstance;\n    debugElem = fixture.debugElement;\n  });\n\n  beforeEach(() => {\n    /* latest way to access directive that you are testing--in our tests */\n    //directive = debugElem.query(By.directive(CharacterCounterDirective)).componentInstance;\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should create CharacterCounterDirective', () => {\n    expect(component.directive).toBeTruthy();\n  });\n\n  describe('header count tests', () => {\n    let headers = []\n    beforeEach(() => {\n      headers = [\n        { name: 'Property',\n          max_length: 23\n        },\n        { name: 'First Name',\n          max_length: 11\n        },\n        { name: 'T-Code',\n          max_length: 8\n        }\n      ]\n    })\n    it('should accurately count with basic headers', () => {\n      component.directive.headers = headers;\n      component.directive.input.val('test [Property]')\n      let remaining = component.directive.count();\n      expect(remaining).toEqual(132);\n\n    })\n    it('should accurately count with space in header Name', () => {\n      component.directive.headers = headers;\n      component.directive.input.val('test [First Name]')\n      let remaining = component.directive.count();\n      expect(remaining).toEqual(144);\n    })\n    it('should accurately count with special character in header Name', () => {\n      component.directive.headers = headers;\n      component.directive.input.val('test [T-Code]')\n      let remaining = component.directive.count();\n      expect(remaining).toEqual(147);\n    })\n    it('should accurately count with no headers', () => {\n      component.directive.input.val('test message')\n      let remaining = component.directive.count();\n      expect(remaining).toEqual(148);\n    })\n  })\n\n});\n\n@Component({\n  template:\n  `\n<textarea rdCharacterCounter [(ngModel)]=\"ngModel\"></textarea>\n  `\n})\nexport class MockWrapperComponent implements AfterViewInit {\n  /* alternate way you could access directive\n    @ViewChild()--works in tests and in production */\n  /* you would access it this way via component.directive in tests */\n  /* not available until afterViewInit() */\n  @ViewChild(CharacterCounterDirective) directive: CharacterCounterDirective;\n\n  ngModel: string = 'initial characters';\n\n  constructor() { }\n\n  ngAfterViewInit() {\n    /* directive should be defined now */\n  }\n\n}\n"]}